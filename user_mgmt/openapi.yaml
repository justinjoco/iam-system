openapi: 3.0.3
info:
  title: User Management Service
  description: |-
    User Management Service
  version: 1.0.0
security:
  - bearerAuth: []
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      requestBody:
        description: Create user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /users:
    get:
      tags:
        - user
      summary: Get users
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get user by user id
      operationId: getUserById
      parameters:
        - name: userId
          in: path
          description: 'The id that needs to be fetched'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - user
      summary: Update info of user
      operationId: updateUserById
      parameters:
        - name: userId
          in: path
          description: 'The id that needs to be fetched'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Update user body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - user
      summary: Soft delete a user
      operationId: deleteUserById
      parameters:
        - name: userId
          in: path
          description: 'The id that needs to be fetched'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
  /user/{userId}/changePassword:
    put:
      tags:
        - user
      summary: Change password of user given userId
      operationId: changeUserPassword
      parameters:
        - name: userId
          in: path
          description: 'The id that needs to be fetched'
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Change password body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
  /role:
    post:
      tags:
        - role
      summary: Create role
      operationId: createRole
      requestBody:
        description: Created role object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /roles:
    get:
      tags:
        - role
      summary: Get roles
      operationId: getRoles
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /role/{roleName}:
    get:
      tags:
        - role
      summary: Get role by name
      operationId: getRoleByName
      parameters:
        - name: roleName
          in: path
          description: 'role name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /role/{roleId}:
    get:
      tags:
        - role
      summary: Get role by id
      operationId: getRoleById
      parameters:
        - name: roleId
          in: path
          description: 'role id'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /permission:
    post:
      tags:
        - permission
      summary: Create permission
      operationId: createPermission
      requestBody:
        description: Create permission object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePermissionBody'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /permissions:
    get:
      tags:
        - permission
      summary: Get permissions
      operationId: getPermissions
      parameters:
        - name: action
          in: query
          description: 'permission action'
          schema:
            type: string
            example: read
        - name: resource
          in: query
          description: 'permission resource'
          schema:
            type: string
            example: user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /permission/{permissionId}:
    get:
      tags:
        - permission
      summary: Get permission by id
      operationId: getPermissionById
      parameters:
        - name: permissionId
          in: path
          description: 'permission id'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /assignment/userroles:
    get:
      tags:
        - assignment
      summary: get user roles
      operationId: getUserRoles
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRole'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /assignment/userrole:
    post:
      tags:
        - assignment
      summary: assign role to user
      operationId: assignRoleToUser
      requestBody:
        description: Create user role assignment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignUserRoleBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /assignment/userrole/{userRoleId}:
    get:
      tags:
        - assignment
      summary: get user role
      operationId: getUserRoleById
      parameters:
        - name: userRoleId
          in: path
          description: 'user role Id'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - assignment
      summary: delete user role
      operationId: deleteUserRoleById
      parameters:
        - name: userRoleId
          in: path
          description: 'user role id'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /assignment/rolepermissions:
    get:
      tags:
        - assignment
      summary: get role permissions
      operationId: getRolePermissions
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RolePermission'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /assignment/rolepermission:
    post:
      tags:
        - assignment
      summary: assign permission to role
      operationId: assignPermissionToRole
      requestBody:
        description: Create role permission assignment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRolePermissionBody'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /assignment/rolepermission/{rolePermissionId}:
    get:
      tags:
        - assignment
      summary: get role permission
      operationId: getRolePermissionById
      parameters:
        - name: rolePermissionId
          in: path
          description: 'role permissionId'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolePermission'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - assignment
      summary: delete role permission
      operationId: deleteRolePermissionById
      parameters:
        - name: rolePermissionId
          in: path
          description: 'role permissionId'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'          
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    ClientError:
      description: Client request error
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: Access is forbidden
    NotFoundError:
      description: Resource was not found
    ServerError:
      description: Server ran into an internal error
  schemas:
    ResourceWriteSuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: Resource created/updated/deleted
    CreateUserBody:
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        roles:
          type: array
          items:
            type: string
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: cdeaee5c-9794-46ce-b4c4-039ac06125e5
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        roles:
          type: array
          items:
            type: string
        permissions:
          type: array
          items:
            type: string
    ChangePasswordBody:
      type: object
      properties:
        password: 
          type: string
    UpdateUserBody:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
    CreateRoleBody:
      type: object
      properties:
        name:
          type: string
          example: admin
    CreatePermissionBody:
      type: object
      properties:
        action:
          type: string
          example: read
        resource:
          type: string
          example: user
    Role:
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
    Permission:
      type: object
      properties:
        action:
          type: string
        resource:
          type: string
        roles:
          type: array
          items:
            type: string
    UserRole:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        role:
          type: string
          example: admin
    RolePermission:
      type: object
      properties:
        id:
          type: string
          format: uuid
        roleName:
          type: string
          example: admin
        permissionValue:
          type: string
          example: write:user
    AssignUserRoleBody:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        roleId:
          type: string
          format: uuid
    AssignRolePermissionBody:
      type: object
      properties:
        permissionId:
          type: string
          format: uuid
        roleId:
          type: string
          format: uuid


