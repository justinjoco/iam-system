openapi: 3.0.3
info:
  title: User Management Service
  description: User Management Service
  version: 1.0.0
servers:
- url: /
security:
- bearerAuth: []
paths:
  /user:
    post:
      tags:
      - user
      summary: Create user
      operationId: create_user
      requestBody:
        description: Create user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserBody'
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'
        "400":
          description: Client request error
        "401":
          description: Access token is missing or invalid
        "403":
          description: Access is forbidden
        "500":
          description: Server ran into an internal error
      x-openapi-router-controller: swagger_server.controller.user_controller
  /users:
    get:
      tags:
      - user
      summary: Get users
      operationId: get_users
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
                x-content-type: application/json
        "400":
          description: Client request error
        "401":
          description: Access token is missing or invalid
        "403":
          description: Access is forbidden
        "404":
          description: Resource was not found
        "500":
          description: Server ran into an internal error
      x-openapi-router-controller: swagger_server.controller.user_controller
  /user/{userId}:
    get:
      tags:
      - user
      summary: Get user by user id
      operationId: get_user_by_id
      parameters:
      - name: userId
        in: path
        description: The id that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Client request error
        "401":
          description: Access token is missing or invalid
        "403":
          description: Access is forbidden
        "404":
          description: Resource was not found
        "500":
          description: Server ran into an internal error
      x-openapi-router-controller: swagger_server.controller.user_controller
    put:
      tags:
      - user
      summary: Update info of user
      operationId: update_user_by_id
      parameters:
      - name: userId
        in: path
        description: The id that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        description: Update user body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserBody'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'
        "400":
          description: Client request error
        "401":
          description: Access token is missing or invalid
        "403":
          description: Access is forbidden
        "404":
          description: Resource was not found
        "500":
          description: Server ran into an internal error
      x-openapi-router-controller: swagger_server.controller.user_controller
    delete:
      tags:
      - user
      summary: Soft delete a user
      operationId: delete_user_by_id
      parameters:
      - name: userId
        in: path
        description: The id that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'
        "400":
          description: Client request error
        "401":
          description: Access token is missing or invalid
        "403":
          description: Access is forbidden
        "404":
          description: Resource was not found
        "500":
          description: Server ran into an internal error
      x-openapi-router-controller: swagger_server.controller.user_controller
  /user/{userId}/changePassword:
    put:
      tags:
      - user
      summary: Change password of user given userId
      operationId: change_user_password
      parameters:
      - name: userId
        in: path
        description: The id that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        description: Change password body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordBody'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceWriteSuccessResponse'
        "400":
          description: Client request error
        "401":
          description: Access token is missing or invalid
        "403":
          description: Access is forbidden
        "404":
          description: Resource was not found
        "500":
          description: Server ran into an internal error
      x-openapi-router-controller: swagger_server.controller.user_controller
components:
  schemas:
    ResourceWriteSuccessResponse:
      required:
      - message
      type: object
      properties:
        message:
          type: string
          example: Resource created/updated/deleted
      example:
        message: Resource created/updated/deleted
    CreateUserBody:
      required:
      - email
      - firstName
      - lastName
      - username
      type: object
      properties:
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        roles:
          type: array
          items:
            type: string
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: cdeaee5c-9794-46ce-b4c4-039ac06125e5
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        manager:
          type: string
          example: John Smith
        role:
          type: string
          example: individual_contributor
      example:
        firstName: John
        lastName: James
        manager: John Smith
        role: individual_contributor
        id: cdeaee5c-9794-46ce-b4c4-039ac06125e5
        email: john@email.com
        username: theUser
    ChangePasswordBody:
      required:
      - password
      type: object
      properties:
        password:
          type: string
    UpdateUserBody:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
  responses:
    ClientError:
      description: Client request error
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: Access is forbidden
    NotFoundError:
      description: Resource was not found
    ServerError:
      description: Server ran into an internal error
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: swagger_server.controller.authorization_controller.check_bearerAuth

