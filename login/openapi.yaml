openapi: 3.0.3
info:
  title: Login Service
  description: |-
    Login Service
  version: 1.0.0
paths:
  /authorize:
    get:
      tags:
        - authorize
      summary: Start authorization code flow
      operationId: authorize
      parameters:
        - name: response_type
          in: query
          description: 'Indicates which OAuth 2.0 Flow you want to perform. Use code for Authorization Code Grant (with and without PKCE). Use "code" for Authorization Code without PKCE. Use "pkce" for Authorization Code with PKCE'
          schema:
            type: string
            example: code
        - name: client_id
          in: query
          description: 'client id of application'
          schema:
            type: string
            example: cxzsewevdx
        - name: state
          in: query
          description: 'An opaque value the client adds to the initial request that is included when redirecting back to the client. This value must be used by the client to prevent CSRF attacks.'
          schema:
            type: string
            example: adfckjla1234
        - name: redirect_uri
          in: query
          description: 'client app redirect uri'
          schema:
            type: string
            example: baseUrl/oauth/callback
        - name: code_challenge_method
          in: query
          description: 'code challenge method for pkce'
          schema:
            type: string
            example: S256
        - name: code_challenge
          in: query
          description: 'Generated challenge from the code_verifier'
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            text/html: {}
            
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /token:
    post:
      tags:
        - token
      summary: Get access token
      operationId: generateToken
      requestBody:
        description: Token request body
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'         
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
  /register:
    get:
      tags:
        - login
      summary: Get user account creation page
      responses:
        '200':
          description: successful operation
          content:
            text/html: {}
  /login:
    post:
      tags:
        - login
      summary: Post login creds
      operationId: submitLoginCredentials
      parameters:
        - name: client_id
          in: query
          description: 'client app id'
          schema:
            type: string
            example: dsafdsvcxz
        - name: code_challenge
          in: query
          description: 'This is to be saved for later code verification'
          schema:
            type: string
        - name: code_challenge_method
          in: query
          description: 'code challenge method for pkce'
          schema:
            type: string
            example: S256 
        - name: redirect_uri
          in: query
          description: 'client app redirect uri'
          schema:
            type: string
            example: baseUrl/oauth/callback
        - name: state
          in: query
          description: 'An opaque value the client adds to the initial request that is included when redirecting back to the client. This value must be used by the client to prevent CSRF attacks.'
          schema:
            type: string
            example: adfckjla1234
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          $ref: '#/components/schemas/DefaultAPIResponse'
        '302':
          description: redirects to callback uri for token retrieval, if provided in POST login params and successful login
          headers:
            Location:
              schema: 
                type: string        
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
  /logout:
    post:
      tags:
        - logout
      summary: Expires refresh token of given user
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/schemas/DefaultAPIResponse'     
        '400':
          $ref: '#/components/responses/ClientError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /.well-known/jwks.json:
    get:
      tags:
        - jwks
      summary: Json web key set
      operationId: getPublicJWKS
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JWK'  
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    ClientError:
      description: Client request error
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: Access is forbidden
    NotFoundError:
      description: Resource was not found
    ServerError:
      description: Server ran into an internal error
  schemas:
    DefaultAPIResponse:
      type: object
      required: [message]
      properties:
        message:
          type: string
    LoginCredentials:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
        password:
          type: string
    TokenResponse:
      type: object
      required: [access_token, refresh_token, token_type]
      properties:
        access_token:
          type: string
          format: JWT
        refresh_token:
          type: string
          format: JWT
        token_type:
          type: string
          example: Bearer
    JWK:
      type: object
      additionalProperties: true
    TokenRequest:
      type: object
      required: [grant_type, client_id, scope]
      properties:
        grant_type:
          description: 'grant type of token. Valid values: [authorization_code, pkce, client_credentials, password, refresh].'
          type: string
          example: pkce
        client_id:
          description: 'client app identifier. Required for each grant type'
          type: string
        client_secret:
          description: 'client app secret. Required for client_credentials grant_type'
          type: string
          example: xzvcsafdwqffds
        scope:
          description: 'The scopes which you want to request authorization for. These must be separated by a space'
          type: string
          example: read:user
        redirect_uri:
          description: 'This is required only if it was set at the GET /authorize endpoint. The values from /authorize must match the value you set at /oauth/token. Required for authorization_code and pkce grant_types'
          type: string
          example: baseUrl/oauth/callback
        code:
          description: 'The Authorization Code received from the initial /authorize call. Required for PKCE'
          type: string
        code_verifier:
          description: 'Cryptographically random key that was used to generate the code_challenge passed to /authorize. Required for PKCE'
          type: string
        refresh_token:
          description: 'refresh token needed to regenerate JWT. Required for refresh grant_type'
          type: string   

